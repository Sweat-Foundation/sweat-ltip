{
  "schema_version": "0.4.0",
  "metadata": {
    "name": "sweat-ltip",
    "version": "0.1.0",
    "build": {
      "compiler": "rustc 1.86.0",
      "builder": "cargo-near cargo-near-build 0.9.0"
    },
    "wasm_hash": "581G2iZrV9hP6jsqiPNVwAvac3fu6VjGKSCd7Mb1nVT"
  },
  "body": {
    "functions": [
      {
        "name": "authorize",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_ids",
              "type_schema": {
                "type": "array",
                "items": {
                  "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
                  "type": "string"
                }
              }
            },
            {
              "name": "percentage",
              "type_schema": {
                "type": [
                  "integer",
                  "null"
                ],
                "format": "uint32",
                "minimum": 0.0
              }
            }
          ]
        }
      },
      {
        "name": "buy",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_ids",
              "type_schema": {
                "type": "array",
                "items": {
                  "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
                  "type": "string"
                }
              }
            },
            {
              "name": "percentage",
              "type_schema": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            }
          ]
        }
      },
      {
        "name": "claim",
        "kind": "call"
      },
      {
        "name": "contract_source_metadata",
        "kind": "view"
      },
      {
        "name": "ft_on_transfer",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "sender_id",
              "type_schema": {
                "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
                "type": "string"
              }
            },
            {
              "name": "amount",
              "type_schema": {
                "type": "string"
              }
            },
            {
              "name": "msg",
              "type_schema": {
                "type": "string"
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "$ref": "#/definitions/PromiseOrValueString"
          }
        }
      },
      {
        "name": "get_account",
        "kind": "view",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_id",
              "type_schema": {
                "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
                "type": "string"
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "anyOf": [
              {
                "$ref": "#/definitions/Account"
              },
              {
                "type": "null"
              }
            ]
          }
        }
      },
      {
        "name": "get_orders",
        "kind": "view",
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "array",
            "items": {
              "type": "array",
              "items": [
                {
                  "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
                  "type": "string"
                },
                {
                  "type": "integer",
                  "format": "uint32",
                  "minimum": 0.0
                },
                {
                  "type": "string"
                }
              ],
              "maxItems": 3,
              "minItems": 3
            }
          }
        }
      },
      {
        "name": "get_pending_transfers",
        "kind": "view",
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "array",
                "items": [
                  {
                    "type": "integer",
                    "format": "uint32",
                    "minimum": 0.0
                  },
                  {
                    "type": "string"
                  }
                ],
                "maxItems": 2,
                "minItems": 2
              }
            }
          }
        }
      },
      {
        "name": "get_spare_balance",
        "kind": "view",
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "string"
          }
        }
      },
      {
        "name": "grant_role",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_id",
              "type_schema": {
                "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
                "type": "string"
              }
            },
            {
              "name": "role",
              "type_schema": {
                "$ref": "#/definitions/Role"
              }
            }
          ]
        }
      },
      {
        "name": "has_role",
        "kind": "view",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_id",
              "type_schema": {
                "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
                "type": "string"
              }
            },
            {
              "name": "role",
              "type_schema": {
                "$ref": "#/definitions/Role"
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "boolean"
          }
        }
      },
      {
        "name": "issue",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "issue_at",
              "type_schema": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            {
              "name": "grants",
              "type_schema": {
                "type": "array",
                "items": {
                  "type": "array",
                  "items": [
                    {
                      "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
                      "type": "string"
                    },
                    {
                      "type": "string"
                    }
                  ],
                  "maxItems": 2,
                  "minItems": 2
                }
              }
            }
          ]
        }
      },
      {
        "name": "members",
        "kind": "view",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "role",
              "type_schema": {
                "$ref": "#/definitions/Role"
              }
            }
          ]
        },
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "array",
            "items": {
              "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
              "type": "string"
            }
          }
        }
      },
      {
        "name": "new",
        "kind": "call",
        "modifiers": [
          "init"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "token_id",
              "type_schema": {
                "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
                "type": "string"
              }
            },
            {
              "name": "cliff_duration",
              "type_schema": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            {
              "name": "full_unlock_duration",
              "type_schema": {
                "type": "integer",
                "format": "uint32",
                "minimum": 0.0
              }
            },
            {
              "name": "owner_id",
              "type_schema": {
                "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
                "type": "string"
              }
            }
          ]
        }
      },
      {
        "name": "on_authorize_complete",
        "kind": "call",
        "modifiers": [
          "private"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "transfer_keys",
              "type_schema": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/TransferKey"
                }
              }
            }
          ]
        }
      },
      {
        "name": "own_accept_owner",
        "kind": "call",
        "modifiers": [
          "payable"
        ]
      },
      {
        "name": "own_get_owner",
        "kind": "view",
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      {
        "name": "own_get_proposed_owner",
        "kind": "view",
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
            "type": [
              "string",
              "null"
            ]
          }
        }
      },
      {
        "name": "own_propose_owner",
        "kind": "call",
        "modifiers": [
          "payable"
        ],
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_id",
              "type_schema": {
                "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
                "type": [
                  "string",
                  "null"
                ]
              }
            }
          ]
        }
      },
      {
        "name": "own_renounce_owner",
        "kind": "call",
        "modifiers": [
          "payable"
        ]
      },
      {
        "name": "paus_is_paused",
        "kind": "view",
        "result": {
          "serialization_type": "json",
          "type_schema": {
            "type": "boolean"
          }
        }
      },
      {
        "name": "revoke_role",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_id",
              "type_schema": {
                "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
                "type": "string"
              }
            },
            {
              "name": "role",
              "type_schema": {
                "$ref": "#/definitions/Role"
              }
            }
          ]
        }
      },
      {
        "name": "terminate",
        "kind": "call",
        "params": {
          "serialization_type": "json",
          "args": [
            {
              "name": "account_id",
              "type_schema": {
                "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
                "type": "string"
              }
            },
            {
              "name": "timestamp",
              "type_schema": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            }
          ]
        }
      },
      {
        "name": "upgrade",
        "kind": "call",
        "params": {
          "serialization_type": "borsh",
          "args": [
            {
              "name": "code",
              "type_schema": {
                "declaration": "Vec<u8>",
                "definitions": {
                  "Vec<u8>": {
                    "Sequence": {
                      "length_width": 4,
                      "length_range": {
                        "start": 0,
                        "end": 4294967295
                      },
                      "elements": "u8"
                    }
                  },
                  "u8": {
                    "Primitive": 1
                  }
                }
              }
            }
          ]
        }
      }
    ],
    "root_schema": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "String",
      "type": "string",
      "definitions": {
        "Account": {
          "type": "object",
          "required": [
            "grants"
          ],
          "properties": {
            "grants": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/Grant"
              }
            }
          }
        },
        "Grant": {
          "type": "object",
          "required": [
            "claimed_amount",
            "order_amount",
            "total_amount"
          ],
          "properties": {
            "claimed_amount": {
              "type": "string"
            },
            "order_amount": {
              "type": "string"
            },
            "total_amount": {
              "type": "string"
            }
          }
        },
        "PromiseOrValueString": {
          "type": "string"
        },
        "Role": {
          "type": "string",
          "enum": [
            "issuer",
            "executor",
            "predecessor"
          ]
        },
        "TransferKey": {
          "type": "object",
          "required": [
            "account_id",
            "issue_at"
          ],
          "properties": {
            "account_id": {
              "description": "NEAR Account Identifier.\n\nThis is a unique, syntactically valid, human-readable account identifier on the NEAR network.\n\n[See the crate-level docs for information about validation.](index.html#account-id-rules)\n\nAlso see [Error kind precedence](AccountId#error-kind-precedence).\n\n## Examples\n\n``` use near_account_id::AccountId;\n\nlet alice: AccountId = \"alice.near\".parse().unwrap();\n\nassert!(\"ƒelicia.near\".parse::<AccountId>().is_err()); // (ƒ is not f) ```",
              "type": "string"
            },
            "issue_at": {
              "type": "integer",
              "format": "uint32",
              "minimum": 0.0
            }
          }
        }
      }
    }
  }
}